<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" creationComplete="initApp()"
                backgroundGradientColors="[#8080c0, #ffffff]">

    <mx:SolidColor id="colorChart" color="red" alpha="0.3"/>
    <mx:Panel width="250" height="179" layout="absolute" id="login" title="Please enter password">
        <mx:Label x="35" y="27" text="Password"/>
        <mx:TextInput x="35" y="53" id="pass"/>
        <mx:Button x="82.5" y="83" label="Enter" click="isLogin()"/>
    </mx:Panel>
    <mx:VBox id="main" left="10" right="10" top="10" bottom="10" height="100%" width="100%">
        <mx:HBox>
            <mx:Canvas width="300" height="100%"><mx:TextArea width="100%" height="100%" text="This application demonstrates
			calculating some OLAP analytics on historical data. In this concrete example,
			we will parse NetFlow logs to find the maximum traffic usage over the last month."/>
            </mx:Canvas>
            <!--mx:Canvas width="200" height="100%"-->
            <mx:Canvas>
                <mx:HBox horizontalCenter="0">
                    <mx:Label id="countNode" text="Max Workers "/>
                    <mx:NumericStepper id="nMachines" minimum="1" maximum="15" />
                    <mx:Button id="startApp" label="Start Application" click="startApplicationClick()"/>
                </mx:HBox>
                <mx:Button id="clear" label="Clear table result" click="clearResult()" y="40" left="1"/>
                <mx:Button id="stop" label="Stop Application" click="stopApp()" y="40" right="1"/>
            </mx:Canvas>
            <!--/mx:Canvas-->
            <mx:Canvas width="300" height="100%" color="white" backgroundColor="black">
                <mx:Form>
                    <mx:FormItem label="Offender:"><mx:Label id="ip" text=""/></mx:FormItem>
                    <mx:FormItem label="Traffic used:"><mx:Label id="traffic" text=""/></mx:FormItem>
                </mx:Form>
            </mx:Canvas>
        </mx:HBox>
        <mx:HBox height="100%" width="100%">
            <mx:Panel width="300" height="100%" id="clusterStatus" title="Cluster Status: ">
                <mx:DataGrid id="tableNodeInfo" dataProvider="{dataNodeInfoTable}" width="100%" height="100%">
                    <mx:columns>
                        <mx:DataGridColumn dataField="Node"/>
                        <mx:DataGridColumn dataField="Status"/>
                    </mx:columns>
                </mx:DataGrid>
            </mx:Panel>
            <mx:Panel width="100%" height="100%" id="infoTestPanel" title="Last total time: ">
                <mx:VDividedBox width="100%" height="100%">
                    <mx:DataGrid id="tableTestInfo" dataProvider="{dataTestInfoTable}" width="100%" height="100%">
                        <mx:columns>
                            <mx:DataGridColumn dataField="N" headerText="#" width="40"/>
                            <mx:DataGridColumn dataField="Date" minWidth="100"/>
                            <mx:DataGridColumn dataField="Workers"/>
                            <mx:DataGridColumn dataField="Parsing" headerText="Parsing Ave., ms"/>
                            <mx:DataGridColumn dataField="Returning" headerText="Returning Ave., ms"/>
                            <mx:DataGridColumn dataField="Total" headerText="Total time, ms"/>
                            <mx:DataGridColumn dataField="IP"/>
                            <mx:DataGridColumn dataField="Traffic"/>
                        </mx:columns>
                    </mx:DataGrid>
                    <mx:TabNavigator width="100%" height="100%">
                        <mx:Canvas label="Column Chart" width="100%" height="100%">
                            <mx:VDividedBox width="100%" height="100%">
                                <mx:ColumnChart width="99%"  height="95%" id="columnChart" dataProvider="{dataColumnChart}" showDataTips="true">
                                    <mx:horizontalAxis>
                                        <mx:CategoryAxis
                                                dataProvider="{dataColumnChart}"
                                                categoryField="Workers"
                                                />
                                    </mx:horizontalAxis>
                                    <mx:series>
                                        <mx:ColumnSeries
                                                yField="Time"
                                                xField="Workers"
                                                displayName="Workers"
                                                fill="{colorChart}"
                                                />
                                    </mx:series>
                                </mx:ColumnChart>
                                <mx:Legend horizontalCenter="0" dataProvider="{columnChart}"/>
                            </mx:VDividedBox>
                        </mx:Canvas>
                        <mx:Canvas label="Line Chart" width="100%" height="100%">
                            <mx:VDividedBox width="100%" height="100%">
                                <mx:LineChart id="lineChart" width="99%" height="95%" dataProvider="{dataLineChart}" showDataTips="true">
                                    <mx:seriesFilters>
                                        <mx:Array/>
                                    </mx:seriesFilters>
                                    <mx:horizontalAxis>
                                        <mx:CategoryAxis
                                                dataProvider="{dataLineChart}"
                                                categoryField="Workers"
                                                />
                                    </mx:horizontalAxis>
                                    <mx:series>
                                        <mx:LineSeries
                                                yField="Ideal"
                                                displayName="Ideal"
                                                >
                                            <mx:lineStroke>
                                                <mx:Stroke
                                                        color="black"
                                                        weight="3"
                                                        />
                                            </mx:lineStroke>
                                        </mx:LineSeries>
                                        <mx:LineSeries
                                                yField="Total"
                                                displayName="Total"
                                                >
                                            <mx:lineStroke>
                                                <mx:Stroke
                                                        color="red"
                                                        weight="3"
                                                        />
                                            </mx:lineStroke>
                                        </mx:LineSeries>
                                    </mx:series>
                                </mx:LineChart>
                                <mx:Legend horizontalCenter="0" dataProvider="{lineChart}"/>
                            </mx:VDividedBox>
                        </mx:Canvas>
                        <mx:Canvas label="Line Chart #2" width="100%" height="100%">
                            <mx:VDividedBox width="100%" height="100%">
                                <mx:LineChart id="lineChart2" width="99%" height="95%" dataProvider="{dataLineChart2}" showDataTips="true">
                                    <mx:seriesFilters>
                                        <mx:Array/>
                                    </mx:seriesFilters>
                                    <mx:horizontalAxis>
                                        <mx:CategoryAxis
                                                dataProvider="{dataLineChart2}"
                                                categoryField="Workers"
                                                />
                                    </mx:horizontalAxis>
                                    <mx:series>
                                        <mx:LineSeries
                                                yField="Ideal"
                                                displayName="Ideal"
                                                >
                                            <mx:lineStroke>
                                                <mx:Stroke
                                                        color="black"
                                                        weight="3"
                                                        />
                                            </mx:lineStroke>
                                        </mx:LineSeries>
                                        <mx:LineSeries
                                                yField="Total"
                                                displayName="Total"
                                                >
                                            <mx:lineStroke>
                                                <mx:Stroke
                                                        color="red"
                                                        weight="3"
                                                        />
                                            </mx:lineStroke>
                                        </mx:LineSeries>
                                    </mx:series>
                                </mx:LineChart>
                                <mx:Legend horizontalCenter="0" dataProvider="{lineChart2}"/>
                            </mx:VDividedBox>
                        </mx:Canvas>
                    </mx:TabNavigator>
                </mx:VDividedBox>
            </mx:Panel>
        </mx:HBox>
    </mx:VBox>

    <mx:RemoteObject id="equestrianService" showBusyCursor="true"
                     fault="onFault(event)" destination="equestrianService">
        <mx:method name="deploy" result="onResultDeploy(event)" fault="onFault(event)"/>
        <mx:method name="start" result="onResultStart(event)" fault="onFault(event)"/>
        <mx:method name="verify" result="onResultVerify(event)" fault="onFault(event)"/>
        <mx:method name="isRun" result="OnResultIsRun(event)" fault="onFault(event)"/>
        <mx:method name="stop" result="OnResultStop(event)" fault="onFault(event)"/>
    </mx:RemoteObject>

    <mx:RemoteObject id="historyService" showBusyCursor="true"
                     fault="onFault(event)" destination="historyService">
        <mx:method name="add" fault="onFault(event)"/>
        <mx:method name="getHistory" result="onResultGetHistory(event)" fault="onFault(event)"/>
        <mx:method name="getLineData" result="onResultGetLineData(event)" fault="onFault(event)"/>
    </mx:RemoteObject>

    <mx:RemoteObject id="parseHostService" showBusyCursor="true"
                     fault="onFault(event)" destination="parseHostService">
        <mx:method name="getCountNode" result="onResultGetCountNode(event)" fault="onFault(event)"/>
    </mx:RemoteObject>

    <mx:Script><![CDATA[
        import mx.collections.ArrayCollection;
        import mx.controls.Alert;
        import mx.rpc.events.FaultEvent;
        import mx.rpc.events.ResultEvent;

        import com.griddynamics.equestrian.entity.ApplicationEntity;

        private var runApplication:Boolean = false;
        private var truePsw:String = "questora";
        private var n:int = 0;
        private var nRun:int = 0;
        private var verifyAppTimer:Timer;
        private var isRunAppTimer:Timer;
        private var cookies:SharedObject;
        [Bindable]
        public var dataColumnChart:ArrayCollection = new ArrayCollection();
        [Bindable]
        public var dataLineChart:ArrayCollection = new ArrayCollection();
        [Bindable]
        public var dataLineChart2:ArrayCollection = new ArrayCollection();
        [Bindable]
        public var dataTestInfoTable:ArrayCollection = new ArrayCollection();
        [Bindable]
        public var dataNodeInfoTable:ArrayCollection = new ArrayCollection();

        private function initApp():void {
            application.removeChild(main);
            isUser(pass.text);
        }

        private function isLogin():void {
            isUser(pass.text);
        }

        private function init():void {
            historyService.getHistory();
            historyService.getLineData();
            parseHostService.getCountNode();
            isRunAppTimer = new Timer(10000);
            isRunAppTimer.addEventListener("timer", isRunAppTimerHandler);
            equestrianService.isRun();
        }

        private function isUser(password:String):void {
            if(password != truePsw) {
                cookies = SharedObject.getLocal("password");
                var psw:String = cookies.data["password"] as String;
                if(psw == truePsw) {
                    if(application.getChildren().lastIndexOf(main) < 0) {
                        application.addChild(main);
                    }
                    application.removeChild(login);
                    init();
                } else {
                    application.removeChild(main);
                    if(application.getChildren().lastIndexOf(login) < 0) {
                        application.addChild(login);
                    }
                }
            } else {
                if(application.getChildren().lastIndexOf(main) < 0) {
                    application.addChild(main);
                }
                application.removeChild(login);
                init();
                cookies = SharedObject.getLocal("password");
                cookies.data["password"] = password;
                cookies.flush();
            }
        }

        private function onResultGetHistory(event:ResultEvent):void {
            dataColumnChart = new ArrayCollection();
            var result:String = event.result as String;
            if (result != "") {
                var array:Array = result.split("|");
                nRun += array.length;
                for (var i:int = 0; i < array.length; i++) {
                    var data:Array = array[i].split(";");
                    addDataTable(String(i + 1), String(data[0]), String(data[1]), String(data[2]),
                            String(data[3]), String(data[4]), String(data[5]),
                            String(data[6]));
                }
            }
        }

        private function onResultGetLineData(event:ResultEvent):void {
            dataLineChart = new ArrayCollection();
            dataLineChart2 = new ArrayCollection();
            var result:String = event.result as String;
            if (result != "") {
                var array:Array = result.split("|");
                for (var i:int = 0; i < array.length; i++) {
                    var data:Array = array[i].split(";");
                    dataLineChart.addItem({Workers:data[0], Ideal:data[1], Total:data[2]});
                    dataLineChart2.addItem({Workers:data[0], Ideal:String(1/int(data[1])),
                        Total:String(1/int(data[2]))});
                }
            }
        }

        private function onResultGetCountNode(event:ResultEvent):void {
            nMachines.maximum = event.result as int;
            countNode.text += String(event.result);
        }

        private function OnResultIsRun(event:ResultEvent):void {
            if (Boolean(event.result)) {
                if (startApp.enabled && !runApplication) {
                    Alert.show("Please wait", "System busy");
                    startApp.enabled = false;
                }
                clusterStatus.label = "Cluster Status: Busy";
            } else {
                if (!startApp.enabled) {
                    Alert.show("The system is ready for use", "Welcome");
                    startApp.enabled = true;
                    historyService.getHistory();
                    historyService.getLineData();
                }
                clusterStatus.label = "Cluster Status: ";
            }
            isRunAppTimer.start();
        }

        private function OnResultStop(event:ResultEvent):void {
            runApplication = false;
            verifyAppTimer.stop();
        }

        private function onResultDeploy(event:ResultEvent):void {
        }

        private function onResultStart(event:ResultEvent):void {
            verifyAppTimer = new Timer(10000);
            verifyAppTimer.addEventListener("timer", verifyAppTimerHandler);
            equestrianService.verify();
        }

        private function onResultVerify(event:ResultEvent):void {
            var app:ApplicationEntity = event.result as ApplicationEntity;
            runApplication = app.schedulerStatus;
            if (app.schedulerStatus) {
                addDataNodeInfo(app.nodeIp);
                verifyAppTimer.start();
            } else {
                addDataNodeInfo(app.nodeIp);
                runApplication = false;
                verifyAppTimer.stop();
                if (app.time != "") {
                    nRun += 1;
                    infoTestPanel.label = "Last total time: " + app.time + "ms";
                    ip.text = app.ip;
                    traffic.text = app.traf;
                    historyService.add(app.date.toDateString() + " " + app.date.toTimeString(), app.workers,
                            app.parsing, app.returning, app.time, app.ip, app.traf);
                    addDataTable(String(nRun), app.date.toDateString() + " " + app.date.toTimeString(), app.workers,
                            app.parsing, app.returning, app.time, app.ip, app.traf);
                }
            }
        }

        private function addDataTable(n:String, date:String, nWorkers:String,
                                      parsing:String, returning:String, time:String, ip:String, traf:String):void {

            dataTestInfoTable.addItem({N:n, Date:date, Workers:nWorkers,
                Parsing:parsing, Returning:returning, Total:time, IP:ip, Traffic:traf});
            addDataColumnChart("# " + n + " \n" + nWorkers + "Workers", time);
            historyService.getLineData();
        }

        private function addDataColumnChart(nWorkers:String, time:String):void {
            dataColumnChart.addItem({Time:time, Workers:nWorkers});
        }

        private function addDataNodeInfo(info:String):void {
            dataNodeInfoTable = new ArrayCollection();
            if (info != "") {
                var nodes:Array = info.split(", ");
                for(var i:int = 0; i < nodes.length; i++) {
                    var data:Array = String(nodes[i]).split("=");
                    dataNodeInfoTable.addItem({Node:data[0], Status:data[1]});
                }
            }
        }

        private function clearResult():void {
            dataTestInfoTable = new ArrayCollection();
            dataColumnChart = new ArrayCollection();
            dataLineChart = new ArrayCollection();
            dataLineChart2 = new ArrayCollection();
        }

        private function stopApp():void {
            equestrianService.stop();
        }

        private function onFault(event:FaultEvent):void {
            Alert.show(event.fault.faultString);
        }

        private function startApplicationClick():void {
            clusterStatus.label = "Cluster Status: Busy";
            infoTestPanel.label = "Last total time: ";
            ip.text = "";
            traffic.text = "";
            dataNodeInfoTable = new ArrayCollection();
            if (!runApplication) {
                if (n != int(nMachines.value)) {
                    n = int(nMachines.value);
                    equestrianService.deploy(nMachines.value as int);
                }
                equestrianService.start();
            }
        }

        public function verifyAppTimerHandler(event:TimerEvent):void {
            verifyAppTimer.stop();
            equestrianService.verify();
        }

        public function isRunAppTimerHandler(event:TimerEvent):void {
            isRunAppTimer.stop();
            equestrianService.isRun();
        }
        ]]></mx:Script>
</mx:Application>