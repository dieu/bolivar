<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml">
    <mx:creationComplete>
        <![CDATA[
            initApp();
        ]]>
    </mx:creationComplete>

    <mx:SolidColor id="colorChart" color="red" alpha="0.3"/>

    <mx:Panel  width="100%" height="100%" layout="absolute" title="Bolivar Demo">
        <mx:HBox horizontalCenter="0" y="10">
            <mx:Label id="countNode" text="Max Workers "/>
            <mx:NumericStepper id="nMachines" minimum="1" maximum="15" />
            <mx:Button id="startApp" label="Start Application" click="startApplicationClick()"/>
        </mx:HBox>
        <mx:HBox horizontalCenter="0" y="40">
            <mx:Button id="clear" label="Clear table result" click="clearResult()"/>
            <mx:Button id="stop" label="Stop Application" click="stopApp()"/>
        </mx:HBox>
        <mx:VDividedBox y="116" horizontalAlign="center" verticalAlign="middle" height="100%" width="100%" >
            <mx:HDividedBox width="99%">
                <mx:VDividedBox height="100%" width="20%">
                    <mx:Label id="statusApplication" width="150"
                              text="Status Application" fontWeight="bold" fontSize="14"/>
                    <mx:TextArea id="logApplication" height="100%" width="100%" fontSize="10"/>
                </mx:VDividedBox>
                <mx:DataGrid id="table" dataProvider="{dataTable}" width="80%" height="100%">
                    <mx:columns>
                        <mx:DataGridColumn dataField="N" headerText="#"/>
                        <mx:DataGridColumn dataField="Date"/>
                        <mx:DataGridColumn dataField="Workers"/>
                        <mx:DataGridColumn dataField="Parsing" headerText="Parsing Ave., ms"/>
                        <mx:DataGridColumn dataField="Returning" headerText="Returning Ave., ms"/>
                        <mx:DataGridColumn dataField="Total" headerText="Total time, ms"/>
                        <mx:DataGridColumn dataField="IP"/>
                        <mx:DataGridColumn dataField="Traffic"/>
                    </mx:columns>
                </mx:DataGrid>
            </mx:HDividedBox>
            <mx:TabNavigator width="100%" height="100%">
                <mx:Canvas label="Column Chart" width="100%" height="100%">
                    <mx:VDividedBox width="100%" height="100%">
                        <mx:ColumnChart width="99%"  height="95%" id="columnChart" dataProvider="{dataColumnChart}" showDataTips="true">
                            <mx:horizontalAxis>
                                <mx:CategoryAxis
                                        dataProvider="{dataColumnChart}"
                                        categoryField="Workers"
                                        />
                            </mx:horizontalAxis>
                            <mx:series>
                                <mx:ColumnSeries
                                        yField="Time"
                                        xField="Workers"
                                        displayName="Workers"
                                        fill="{colorChart}"
                                        />
                            </mx:series>
                        </mx:ColumnChart>
                        <mx:Legend horizontalCenter="0" dataProvider="{columnChart}"/>
                    </mx:VDividedBox>
                </mx:Canvas>
                <mx:Canvas label="Line Chart" width="100%" height="100%">
                    <mx:VDividedBox width="100%" height="100%">
                        <mx:LineChart id="lineChart" width="99%" height="95%" dataProvider="{dataLineChart}">
                            <mx:seriesFilters>
                                <mx:Array/>
                            </mx:seriesFilters>
                            <mx:horizontalAxis>
                                <mx:CategoryAxis
                                        dataProvider="{dataLineChart}"
                                        categoryField="Workers"
                                        />
                            </mx:horizontalAxis>
                            <mx:series>
                                <mx:LineSeries
                                        yField="Ideal"
                                        displayName="Ideal"
                                        >
                                    <mx:lineStroke>
                                        <mx:Stroke
                                                color="black"
                                                weight="3"
                                                />
                                    </mx:lineStroke>
                                </mx:LineSeries>
                                <mx:LineSeries
                                        yField="Total"
                                        displayName="Total"
                                        >
                                    <mx:lineStroke>
                                        <mx:Stroke
                                                color="red"
                                                weight="3"
                                                />
                                    </mx:lineStroke>
                                </mx:LineSeries>
                            </mx:series>
                        </mx:LineChart>
                        <mx:Legend horizontalCenter="0" dataProvider="{lineChart}"/>
                    </mx:VDividedBox>
                </mx:Canvas>
            </mx:TabNavigator>
        </mx:VDividedBox>
    </mx:Panel>

    <mx:RemoteObject id="equestrianService" showBusyCursor="true"
                     fault="onFault(event)" destination="equestrianService">
        <mx:method name="deploy" result="onResultDeploy(event)" fault="onFault(event)"/>
        <mx:method name="start" result="onResultStart(event)" fault="onFault(event)"/>
        <mx:method name="verify" result="onResultVerify(event)" fault="onFault(event)"/>
        <mx:method name="isRun" result="OnResultIsRun(event)" fault="onFault(event)"/>
        <mx:method name="stop" result="OnResultStop(event)" fault="onFault(event)"/>
    </mx:RemoteObject>

    <mx:RemoteObject id="historyService" showBusyCursor="true"
                     fault="onFault(event)" destination="historyService">
        <mx:method name="add" result="onResultAdd(event)" fault="onFault(event)"/>
        <mx:method name="get" result="onResultGet(event)" fault="onFault(event)"/>
    </mx:RemoteObject>

    <mx:RemoteObject id="parseHostService" showBusyCursor="true"
                     fault="onFault(event)" destination="parseHostService">
        <mx:method name="getCountNode" result="onResultGetCountNode(event)" fault="onFault(event)"/>
    </mx:RemoteObject>


    <mx:Script><![CDATA[
        import mx.collections.ArrayCollection;
        import mx.controls.Alert;
        import mx.rpc.events.FaultEvent;
        import mx.rpc.events.ResultEvent;

        import com.griddynamics.equestrian.entity.ApplicationEntity;

        private var runApplication:Boolean = false;
        private var n:int = 0;
        private var nRun:int = 0;
        private var verifyAppTimer:Timer;
        private var isRunAppTimer:Timer;
        [Bindable]
        public var dataColumnChart:ArrayCollection = new ArrayCollection();
        [Bindable]
        public var dataLineChart:ArrayCollection = new ArrayCollection();
        [Bindable]
        public var dataTable:ArrayCollection = new ArrayCollection();

        private function initApp():void {
            historyService.get();
            parseHostService.getCountNode();
            isRunAppTimer = new Timer(10000);
            isRunAppTimer.addEventListener("timer", isRunAppTimerHandler);
            equestrianService.isRun();
        }

        private function onResultGet(event:ResultEvent):void {
            var result:String = event.result as String;
            if (result != "") {
                var array:Array = result.split("|");
                nRun += array.length;
                for (var i:int = 0; i < array.length; i++) {
                    var data:Array = array[i].split(";");
                    addDataTable(String(i+1), String(data[0]), String(data[1]), String(data[2]),
                            String(data[3]), String(data[4]), String(data[5]),
                            String(data[6]));
                }
            }
        }

        private function onResultGetCountNode(event:ResultEvent):void {
            nMachines.maximum = event.result as int;
            countNode.text += String(event.result);
        }

        private function OnResultIsRun(event:ResultEvent):void {
            if (Boolean(event.result)) {
                if (startApp.enabled) {
                    Alert.show("Please wait", "System busy");
                    startApp.enabled = false;
                }
                isRunAppTimer.start();
            } else {
                if (!startApp.enabled) {
                    Alert.show("The system is ready for use", "Welcome");
                    startApp.enabled = true;
                }
                isRunAppTimer.stop();

            }
        }

        private function OnResultStop(event:ResultEvent):void {
            logApplication.text = "";
            logApplication.text += "Server Stop \n";
            logApplication.text += "Worker Stop \n";
            logApplication.text += "Scheluder Stop \n";
            runApplication = false;
            verifyAppTimer.stop();
        }

        private function onResultAdd(event:ResultEvent):void {
        }

        private function onResultDeploy(event:ResultEvent):void {
        }

        private function onResultStart(event:ResultEvent):void {
            verifyAppTimer = new Timer(10000);
            verifyAppTimer.addEventListener("timer", verifyAppTimerHandler);
            equestrianService.verify();            
        }

        private function onResultVerify(event:ResultEvent):void {
            var app:ApplicationEntity = event.result as ApplicationEntity;
            runApplication = app.schedulerStatus;
            logApplication.text = "";
            if (app.schedulerStatus) {
                logApplication.text += "Server Running \n";
                logApplication.text += "Worker Running \n";
                logApplication.text += "Scheluder Running \n";
                logApplication.text += app.applicationStatus;
                verifyAppTimer.start();
                //            } else if (app.time == "") {
                //                logApplication.text += "Server Running \n";
                //                logApplication.text += "Worker Running \n";
                //                logApplication.text += "Scheluder Running \n";
                //                logApplication.text += "Wait...";
                //                startApplicationClick();
            } else {
                logApplication.text += "Server Stop \n";
                logApplication.text += "Worker Stop \n";
                logApplication.text += "Scheluder Stop \n";
                runApplication = false;
                verifyAppTimer.stop();
                if(app.time != "") {
                    nRun += 1;
                    historyService.add(app.date.toDateString() + " " + app.date.toTimeString(), app.workers,
                            app.parsing, app.returning, app.time, app.ip, app.traf);
                    addDataTable(String(nRun), app.date.toDateString() + " " + app.date.toTimeString(), app.workers,
                           app.parsing, app.returning, app.time, app.ip, app.traf);
                }
            }
        }

        private function addDataTable(n:String, date:String, nWorkers:String,
                                      parsing:String, returning:String, time:String, ip:String, traf:String):void {

            dataTable.addItem({N:n, Date:date, Workers:nWorkers,
                Parsing:parsing, Returning:returning, Total:time, IP:ip, Traffic:traf});
            addDataColumnChart("№ " + n + " \n" + nWorkers + "Workers", time);
            addDataLineChart(nWorkers, time);
        }

        private function addDataColumnChart(nWorkers:String, time:String):void {
            dataColumnChart.addItem({Time:time, Workers:nWorkers});
        }

            private function addDataLineChart(nWorkers:String, time:String):void {
                var newTime:String = "";
                for(var i:int = 0; i < dataLineChart.length; i++) {
                    var obj:Object = dataLineChart.getItemAt(i);
                    var n:String = obj["Workers"];
                    if(nWorkers == n) {
                        var timeOld:String = obj["Total"];
                        newTime = String((int(time) + int(timeOld))/2);
                        var objPrev:Object = dataLineChart.getItemAt(i-1);
                        var idealTime:String = String(int(objPrev["Ideal"]) / 2);
                        dataLineChart.removeItemAt(i);
                        dataLineChart.addItem({Workers:nWorkers, Ideal:idealTime, Total:newTime});
                        if(i + 1 < dataLineChart.length) {
                            var objTo:Object = dataLineChart.getItemAt(i+1);
                            var newIdealTime:String = String(int(newTime) / 2);
                            dataLineChart.removeItemAt(i+1);
                            dataLineChart.addItem({Workers:objTo["Workers"], Ideal:newIdealTime, Total:objTo["Total"]});
                        }
                        break;
                    }
                }
                if(newTime == "") {
                    var newIdeal:String = time;
                    for(var j:int = 0; j+1 < dataLineChart.length; j++) {
                        obj = dataLineChart.getItemAt(j);
                        objTo = dataLineChart.getItemAt(j+1);
                        var nPre:int = int(obj["Workers"]);
                        var nTo:int = int(objTo["Workers"]);
                        if(nPre < int(nWorkers) && int(nWorkers) > nTo) {
                            newIdeal = String(int(obj["Total"]) / 2);
                            break;
                        } else if(int(nWorkers) > nTo && i+2 == dataLineChart.length) {
                            newIdeal = String(int(objTo["Total"]) / 2);
                            break;
                        }
                    }
                    dataLineChart.addItem({Workers:nWorkers, Ideal:newIdeal, Total:time});
                }
            }

        private function clearResult():void {
            dataTable = new ArrayCollection();
            dataColumnChart = new ArrayCollection();
        }

        private function stopApp():void {
            equestrianService.stop();
        }

        private function onFault(event:FaultEvent):void {
            Alert.show(event.fault.faultString);
        }

        private function startEnvironmentClick():void {

        }

        private function startApplicationClick():void {
            if (!runApplication) {
                if (n != int(nMachines.value)) {
                    n = int(nMachines.value);
                    equestrianService.deploy(nMachines.value as int);
                }
                equestrianService.start();
            }
        }

        public function verifyAppTimerHandler(event:TimerEvent):void {
            verifyAppTimer.stop();
            equestrianService.verify();

        }

        public function isRunAppTimerHandler(event:TimerEvent):void {
            isRunAppTimer.stop();
            equestrianService.isRun();

        }

        private function stopEnvironmentClick():void {

        }
        ]]></mx:Script>
</mx:Application>